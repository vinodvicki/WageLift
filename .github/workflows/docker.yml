name: Docker Build & Push

on:
  push:
    branches: [main]
    tags: ['v*']
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: wagelift

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
      
    strategy:
      matrix:
        service: [frontend, backend]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-
            
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          platforms: linux/amd64,linux/arm64
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/${{ matrix.service }}-image.tar
          
      - name: Load image for scanning
        run: docker load -i /tmp/${{ matrix.service }}-image.tar
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.service }}-results.sarif'
          
      - name: Check for critical vulnerabilities
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v ${{ github.workspace }}:/workspace \
            aquasec/trivy image \
            --exit-code 1 \
            --severity CRITICAL \
            ${{ steps.meta.outputs.tags }}
            
      - name: Push Docker image
        if: success()
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.meta.outputs.tags }}
          format: spdx-json
          output-file: '${{ matrix.service }}-sbom.spdx.json'
          
      - name: Upload SBOM as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.service }}-sbom
          path: '${{ matrix.service }}-sbom.spdx.json'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to staging environment
        run: |
          echo "Deployment to staging would happen here"
          echo "Using images:"
          echo "  Frontend: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-frontend:main"
          echo "  Backend: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-backend:main"
          
      - name: Run staging smoke tests
        run: |
          echo "Running smoke tests against staging environment"
          # Add actual smoke test commands here
          
      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Staging deployment successful"
          else
            echo "❌ Staging deployment failed"
          fi

  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: build-and-push
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        
      - name: Generate security summary
        run: |
          echo "# 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Docker Image Vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f trivy-frontend-results.sarif ]; then
            echo "### Frontend Image" >> $GITHUB_STEP_SUMMARY
            echo "Vulnerability scan completed. Check Security tab for details." >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f trivy-backend-results.sarif ]; then
            echo "### Backend Image" >> $GITHUB_STEP_SUMMARY
            echo "Vulnerability scan completed. Check Security tab for details." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Software Bill of Materials (SBOM)" >> $GITHUB_STEP_SUMMARY
          echo "SBOMs generated for both images and uploaded as artifacts." >> $GITHUB_STEP_SUMMARY 